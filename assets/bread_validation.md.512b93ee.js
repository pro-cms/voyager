import{_ as a,c as n,o as e,a as s}from"./app.e6a18615.js";var t="/voyager/bread-builder/validation.png";const k='{"title":"Validation","description":"","frontmatter":{},"headers":[{"level":2,"title":"Validating multi language inputs","slug":"validating-multi-language-inputs"},{"level":2,"title":"Validating array elements","slug":"validating-array-elements"},{"level":3,"title":"Validating 1-dimensional arrays","slug":"validating-1-dimensional-arrays"},{"level":3,"title":"Multi-dimensional array","slug":"multi-dimensional-array"}],"relativePath":"bread/validation.md"}',i={},o=s('<h1 id="validation" tabindex="-1">Validation <a class="header-anchor" href="#validation" aria-hidden="true">#</a></h1><p>Voyager allows you to dynamically add validation rules to all formfields in a view.<br> To start open the options for a formfield and look for the <code>Validation</code> section.<br> Click the <code>+</code> button to add a rule and fill in the <code>Rule</code> and the <code>Message</code> which will be displayed when this rule fails. The message field is translatable to display translated error messages to users.</p><p><img src="'+t+`" alt=""></p><p>Please check the <a href="https://laravel.com/docs/validation#available-validation-rules" target="_blank" rel="noopener noreferrer">Laravel documentation</a> for all available validation rules.</p><h2 id="validating-multi-language-inputs" tabindex="-1">Validating multi language inputs <a class="header-anchor" href="#validating-multi-language-inputs" aria-hidden="true">#</a></h2><p>You can validate the current app locale <strong>or</strong> all locales by setting the option to <code>Validate all locales</code> or <code>Validate current locale</code> in the layout options.<br> With this you can use <code>Voyager::setLocales([...])</code> to dynamically set languages for various users.<br> For example user A speaks english and german, you could run</p><div class="language-php"><pre><code><span class="token class-name static-context">Voyager</span><span class="token operator">::</span><span class="token function">setLocales</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string single-quoted-string">&#39;de&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;en&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><p>in your service provider and select <code>Validate all locales</code> to force the user to enter the data in both his languages.</p><p>When <code>Validate current locale</code> is selected, only the current locale is validated. Other entered languages are <strong>ignored</strong>.</p><h2 id="validating-array-elements" tabindex="-1">Validating array elements <a class="header-anchor" href="#validating-array-elements" aria-hidden="true">#</a></h2><h3 id="validating-1-dimensional-arrays" tabindex="-1">Validating 1-dimensional arrays <a class="header-anchor" href="#validating-1-dimensional-arrays" aria-hidden="true">#</a></h3><p>Given then following array:</p><div class="language-php"><pre><code><span class="token punctuation">[</span>
    <span class="token string single-quoted-string">&#39;name&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;admin&#39;</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;foo@bar.baz&#39;</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div><p>you can validate any fields by using <code>.name:required</code> or <code>.email:email</code> respectively.<br> Please notice the leading <code>.</code> which tells Voyager that you want to validate a 1-dimensional array</p><h3 id="multi-dimensional-array" tabindex="-1">Multi-dimensional array <a class="header-anchor" href="#multi-dimensional-array" aria-hidden="true">#</a></h3><p>Given the following array of users:</p><div class="language-php"><pre><code><span class="token punctuation">[</span>
    <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;name&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Admin&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;foo@bar.baz&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token punctuation">[</span>
        <span class="token string single-quoted-string">&#39;name&#39;</span>  <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;User&#39;</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">&#39;email&#39;</span> <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;e@ma.il&#39;</span><span class="token punctuation">,</span>
    <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre></div><p>You can validate any fields in <strong>all</strong> elements (users in this case) by using <code>*.name:required</code> and <code>*.email:email</code>.<br> Please notice the leading <code>*.</code> which tells Voyager that you want to validate a multi-dimensional array</p>`,18),l=[o];function r(p,d,c,u,g,h){return e(),n("div",null,l)}var v=a(i,[["render",r]]);export{k as __pageData,v as default};
