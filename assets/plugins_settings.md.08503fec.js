import{_ as n,c as s,o as a,a as t}from"./app.e6a18615.js";const y='{"title":"Settings","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/settings.md"}',e={},p=t(`<h1 id="settings" tabindex="-1">Settings <a class="header-anchor" href="#settings" aria-hidden="true">#</a></h1><p>A plugin can provide settings.<br> Those settings will be merged in the existing settings and will be stored in <code>settings.json</code> only when the user hits <code>Save</code> on the settings-page.<br> Always make sure to use default values when accessing them!<br> To provide additional settings implement the <code>Settings</code> provider and add a method <code>provideSettings</code> like this:</p><div class="language-php"><pre><code><span class="token keyword">use</span> <span class="token package">Voyager<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Plugins<span class="token punctuation">\\</span>GenericPlugin</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Voyager<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Plugins<span class="token punctuation">\\</span>Features<span class="token punctuation">\\</span>Provider<span class="token punctuation">\\</span>Settings</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyPlugin</span> <span class="token keyword">implements</span> <span class="token class-name">GenericPlugin</span><span class="token punctuation">,</span> Settings
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">provideSettings</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>
            <span class="token punctuation">[</span>
                <span class="token string single-quoted-string">&#39;type&#39;</span>          <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;text&#39;</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;group&#39;</span>         <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;My group&#39;</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;name&#39;</span>          <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;My setting&#39;</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;key&#39;</span>           <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;my_setting&#39;</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;value&#39;</span>         <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Value&#39;</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;translatable&#39;</span>  <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;info&#39;</span>          <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;This is a setting provided by a plugin&#39;</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;options&#39;</span>       <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;validation&#39;</span>    <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">[</span>
                <span class="token string single-quoted-string">&#39;type&#39;</span>          <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;text&#39;</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;group&#39;</span>         <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;My group&#39;</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;name&#39;</span>          <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;My second setting&#39;</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;key&#39;</span>           <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;my_second_setting&#39;</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;value&#39;</span>         <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;Value&#39;</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;translatable&#39;</span>  <span class="token operator">=&gt;</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;info&#39;</span>          <span class="token operator">=&gt;</span> <span class="token string single-quoted-string">&#39;This is another setting provided by a plugin&#39;</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;options&#39;</span>       <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">&#39;validation&#39;</span>    <span class="token operator">=&gt;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token punctuation">]</span>
        <span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Make sure to always return an array containing settings (as an array).<br> The best way to generate this setting is to simply create it through the UI and then copy/paste it from your <code>settings.json</code> file.</p></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Whenever a setting with a matching group and key already exists, your provided setting will be ignored!</p></div>`,5),o=[p];function i(c,l,r,u,g,k){return a(),s("div",null,o)}var h=n(e,[["render",i]]);export{y as __pageData,h as default};
