import{_ as e,c as a,o as s,a as n}from"./app.e6a18615.js";var t="/voyager/formfields/media-picker/meta-options.png",i="/voyager/formfields/media-picker/meta-result.png";const g='{"title":"Media Picker","description":"","frontmatter":{},"headers":[{"level":2,"title":"Picking files","slug":"picking-files"},{"level":2,"title":"Options","slug":"options"},{"level":3,"title":"Max","slug":"max"},{"level":3,"title":"Meta properties","slug":"meta-properties"},{"level":3,"title":"Mime types","slug":"mime-types"},{"level":2,"title":"Using media files in your model","slug":"using-media-files-in-your-model"},{"level":3,"title":"Meta properties","slug":"meta-properties-1"},{"level":3,"title":"Thumbnails","slug":"thumbnails"}],"relativePath":"formfields/media-picker.md"}',o={},l=n('<h1 id="media-picker" tabindex="-1">Media Picker <a class="header-anchor" href="#media-picker" aria-hidden="true">#</a></h1><p>The media-picker provides an easy way to use the <a href="./../media-manager.html">media manager</a> as a powerful formfield for your BREADs.</p><h2 id="picking-files" tabindex="-1">Picking files <a class="header-anchor" href="#picking-files" aria-hidden="true">#</a></h2><p>There are two ways to pick files.</p><ol><li>Double click the file you want to pick</li><li>Select multiple files and hit the button &quot;Select X files&quot;</li></ol><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Files that are already picked will be removed when picking them again</p></div><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-hidden="true">#</a></h2><h3 id="max" tabindex="-1">Max <a class="header-anchor" href="#max" aria-hidden="true">#</a></h3><p>Defines the maximum amount of files that can be picked.<br> 0 means infinity.<br> When using 1 as the maximum, the currently picked file will automatically be replaced when picking another.</p><h3 id="meta-properties" tabindex="-1">Meta properties <a class="header-anchor" href="#meta-properties" aria-hidden="true">#</a></h3><p>This option lets you add simple textboxes to every picked file.<br> For example, when you want to pick images, you could add a title and an alt-tag.<br> Click <code>+</code> to add a new property and add the key (for example <code>title</code>) and the textbox placeholder (<code>Title</code>).</p><p><img src="'+t+'" alt=""></p><p><img src="'+i+`" alt=""></p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Meta properties are translatable. Simply toggle the locale and enter the translated text!</p></div><h3 id="mime-types" tabindex="-1">Mime types <a class="header-anchor" href="#mime-types" aria-hidden="true">#</a></h3><p>With this field you can decide which files can be uploaded and picked.<br> Simply add a new item and insert the mime-types you want to support.<br> Here are some examples:</p><ul><li>image/jpg - only allow JPG images</li><li>image/* - allow all images</li><li>directory - display directories</li></ul><p>When no types are defined all are allowed.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Note that a mime-type can not be guessed for all files.<br> Always consider official resources like the <a href="http://www.iana.org/assignments/media-types/media-types.xhtml" target="_blank" rel="noopener noreferrer">official IANA MIME type list</a>.</p></div><h2 id="using-media-files-in-your-model" tabindex="-1">Using media files in your model <a class="header-anchor" href="#using-media-files-in-your-model" aria-hidden="true">#</a></h2><p>Voyager provides a simple way to retreive files in your model.<br> To use it, include the trait:</p><div class="language-php"><pre><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">App</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Voyager<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Traits<span class="token punctuation">\\</span>HasMedia</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyModel</span>
<span class="token punctuation">{</span>
    <span class="token keyword">use</span> <span class="token package">HasMedia</span><span class="token punctuation">;</span>

    <span class="token comment">// ...</span>
<span class="token punctuation">}</span>
</span></code></pre></div><p>You can now call <code>media(field)</code> where <code>field</code> is the column you use in the formfield.<br><code>media()</code> will <strong>always</strong> return a <a href="https://laravel.com/docs/collections" target="_blank" rel="noopener noreferrer">collection</a> containing your files.</p><p>The following properties exist on each item in the collection:</p><ul><li>Disk - The disk where the file is stored</li><li>Path - The relative path to the disk</li><li>Name - The name of the file</li><li>URL - The fully qualified URL of this file</li></ul><h3 id="meta-properties-1" tabindex="-1">Meta properties <a class="header-anchor" href="#meta-properties-1" aria-hidden="true">#</a></h3><p>Meta properties are automatically translated and injected into the items.<br> If you defined a meta prop <code>title</code> you can access it like <code>$model-&gt;media(&#39;field&#39;)-&gt;first()-&gt;title</code></p><h3 id="thumbnails" tabindex="-1">Thumbnails <a class="header-anchor" href="#thumbnails" aria-hidden="true">#</a></h3><p>When a file has thumbnails you can iterate them like:</p><div class="language-php"><pre><code><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$mymodel</span><span class="token operator">-&gt;</span><span class="token property">thumbnails</span> <span class="token keyword">as</span> <span class="token variable">$thumbnail</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token variable">$thumbnail</span><span class="token operator">-&gt;</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>or get a thumbnail by its name like:</p><div class="language-php"><pre><code><span class="token variable">$mymodel</span><span class="token operator">-&gt;</span><span class="token property">thumbnails</span><span class="token operator">-&gt;</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;thumbnail&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;crop&#39;</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div>`,32),p=[l];function r(c,d,u,h,m,k){return s(),a("div",null,p)}var y=e(o,[["render",r]]);export{g as __pageData,y as default};
