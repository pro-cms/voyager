import{_ as n,c as s,o as a,a as t}from"./app.e6a18615.js";const h='{"title":"Widgets","description":"","frontmatter":{},"headers":[{"level":2,"title":"Available methods","slug":"available-methods"}],"relativePath":"plugins/widgets.md"}',e={},o=t(`<h1 id="widgets" tabindex="-1">Widgets <a class="header-anchor" href="#widgets" aria-hidden="true">#</a></h1><p>You can inject widgets which can be shown on the dashboard by simply implementing the <code>Widgets</code> provider and adding a method <code>provideWidgets</code> to your plugin like this:</p><div class="language-php"><pre><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Me<span class="token punctuation">\\</span>MyPlugin</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Voyager<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Classes<span class="token punctuation">\\</span>Widget</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Voyager<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Plugins<span class="token punctuation">\\</span>GenericPlugin</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Voyager<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Plugins<span class="token punctuation">\\</span>Features<span class="token punctuation">\\</span>Provider<span class="token punctuation">\\</span>Widgets</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyPlugin</span> <span class="token keyword">implements</span> <span class="token class-name">GenericPlugin</span><span class="token punctuation">,</span> Widgets
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">provideWidgets</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token class-name return-type">Collection</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token function">collect</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Widget</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;component-name&#39;</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">&#39;title&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-&gt;</span><span class="token function">icon</span><span class="token punctuation">(</span><span class="token string single-quoted-string">&#39;academic-cap&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre></div><h2 id="available-methods" tabindex="-1">Available methods <a class="header-anchor" href="#available-methods" aria-hidden="true">#</a></h2><table><thead><tr><th><strong>Method</strong></th><th><strong>Description</strong></th><th>Example</th><th><strong>Arguments</strong></th></tr></thead><tbody><tr><td>__construct</td><td>Creates a new Widget</td><td><code>new Widget(&#39;component-name&#39;, &#39;My title&#39;);</code></td><td>string component: the name of the component, string title: The title</td></tr><tr><td>width</td><td>Sets the width of the widget</td><td><code>-&gt;width(6)</code></td><td>int width: The width between 3 and 12</td></tr><tr><td>icon</td><td>An icon show next to the title</td><td><code>-&gt;icon(&#39;academic-cap&#39;)</code></td><td>string icon: The name of the icon</td></tr><tr><td>parameters</td><td>Parameters passed to the component</td><td><code>-&gt;parameters([&#39;key&#39; =&gt; &#39;value&#39;])</code></td><td>array parameters: The parameters</td></tr><tr><td>permission</td><td>Display/Hide the widget based on a permission</td><td><code>-&gt;permission(&#39;name_of_permission&#39;)</code></td><td>string permission: The key of a permission, array args: Additional arguments</td></tr></tbody></table>`,5),p=[o];function c(i,d,l,r,u,k){return a(),s("div",null,p)}var m=n(e,[["render",c]]);export{h as __pageData,m as default};
