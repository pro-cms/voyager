import{_ as n,c as t,o as a,a as e}from"./app.e6a18615.js";const k='{"title":"Plugin development","description":"","frontmatter":{},"headers":[{"level":2,"title":"Setting up your development environment","slug":"setting-up-your-development-environment"},{"level":2,"title":"Basics","slug":"basics"},{"level":2,"title":"Types","slug":"types"},{"level":2,"title":"Providers","slug":"providers"},{"level":2,"title":"Filter","slug":"filter"},{"level":2,"title":"Templates","slug":"templates"},{"level":2,"title":"Readme","slug":"readme"}],"relativePath":"plugins/index.md"}',s={},o=e(`<h1 id="plugin-development" tabindex="-1">Plugin development <a class="header-anchor" href="#plugin-development" aria-hidden="true">#</a></h1><p>This section shows you how to develop plugins which can be used in Voyager.</p><h2 id="setting-up-your-development-environment" tabindex="-1">Setting up your development environment <a class="header-anchor" href="#setting-up-your-development-environment" aria-hidden="true">#</a></h2><p>This chapter shows you the easiest way to develop your plugin.</p><p>Choose one of the <a href="#templates">templates</a> we provide and create a repository from it. Open <code>composer.json</code> and change <code>name</code> to whatever you want.<br> Next, push your changes to Github.<br> Now you are ready to require your package to your base Laravel installation.<br> Go to your Laravel installation, open <code>composer.json</code> and add the following:</p><div class="language-json"><pre><code><span class="token property">&quot;minimum-stability&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dev&quot;</span><span class="token punctuation">,</span>
<span class="token property">&quot;require&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">&quot;your/name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;*&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token property">&quot;repositories&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;type&quot;</span><span class="token operator">:</span> <span class="token string">&quot;path&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;url&quot;</span><span class="token operator">:</span> <span class="token string">&quot;path/to/your/plugin&quot;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre></div><p><code>your/name</code> is the name you used in the <code>composer.json</code> file of your plugin.<br> Next run <code>composer update</code> in your laravel installation.<br> After that you are able to simply reload your page and immediately see any changes you made.</p><h2 id="basics" tabindex="-1">Basics <a class="header-anchor" href="#basics" aria-hidden="true">#</a></h2><p>Each plugin requires some steps to be recognized by Voyager.</p><p><strong>Service Provider</strong><br> Registers the plugin(s):</p><div class="language-php"><pre><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">My<span class="token punctuation">\\</span>Plugin</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Illuminate<span class="token punctuation">\\</span>Support<span class="token punctuation">\\</span>ServiceProvider</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Voyager<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Manager<span class="token punctuation">\\</span>Plugins</span> <span class="token keyword">as</span> PluginManager<span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyPluginServiceProvider</span> <span class="token keyword">extends</span> <span class="token class-name">ServiceProvider</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">boot</span><span class="token punctuation">(</span><span class="token class-name type-declaration">PluginManager</span> <span class="token variable">$pluginmanager</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$pluginmanager</span><span class="token operator">-&gt;</span><span class="token function">addPlugin</span><span class="token punctuation">(</span><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\\</span>My<span class="token punctuation">\\</span>Plugin<span class="token punctuation">\\</span>MyPlugin</span><span class="token operator">::</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre></div><div class="info custom-block"><p class="custom-block-title">INFO</p><p>One package can provide multiple plugins.<br> For example, a plugin could provide multiple themes or even different types of plugins like authorization and authentication.<br> All plugins can be enabled/disabled independently. Make sure they don&#39;t depend on each other!</p></div><p><strong>Plugin class</strong></p><p>The plugin class represents the actual plugin and its methods:</p><div class="language-php"><pre><code><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">My<span class="token punctuation">\\</span>Plugin</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">Voyager<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Plugins<span class="token punctuation">\\</span>GenericPlugin</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyPlugin</span> <span class="token keyword">implements</span> <span class="token class-name">GenericPlugin</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;My plugin&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$description</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;This is my plugin!&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$repository</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;my/plugin&#39;</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$website</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;https://github.com/my/plugin&#39;</span><span class="token punctuation">;</span>

    <span class="token comment">// Methods depending on your plugin-type, providers and filters.</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Optionally provide a README file that can be displayed in the plugin UI</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">readme</span> <span class="token operator">=</span> <span class="token function">realpath</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">&#39;/README.md&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></code></pre></div><p><strong>composer.json</strong></p><p>To be able to find your plugin through Voyagers UI you have to provide the tag <code>voyager2-plugin</code> in your composer.json file:</p><div class="language-json"><pre><code><span class="token punctuation">{</span>
    <span class="token property">&quot;keywords&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;voyager2-plugin&quot;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-hidden="true">#</a></h2><p>Plugins can be of various types:</p><table><thead><tr><th><strong>Type</strong></th><th><strong>Class</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>Authentication</td><td><a href="https://github.com/voyager-admin/voyager/blob/2.x/src/Contracts/Plugins/AuthenticationPlugin.php" target="_blank" rel="noopener noreferrer">\\Voyager\\Admin\\Contracts\\Plugins\\AuthenticationPlugin</a></td><td>Handles authentication of users inside Voyager (login, password reset etc)</td></tr><tr><td>Authorization</td><td><a href="https://github.com/voyager-admin/voyager/blob/2.x/src/Contracts/Plugins/AuthorizationPlugin.php" target="_blank" rel="noopener noreferrer">\\Voyager\\Admin\\Contracts\\Plugins\\AuthorizationPlugin</a></td><td>Handles permissions for users and actions</td></tr><tr><td>Formfield</td><td><a href="https://github.com/voyager-admin/voyager/blob/2.x/src/Contracts/Plugins/FormfieldPlugin.php" target="_blank" rel="noopener noreferrer">\\Voyager\\Admin\\Contracts\\Plugins\\FormfieldPlugin</a></td><td>Provides one or many formfields</td></tr><tr><td>Generic</td><td><a href="https://github.com/voyager-admin/voyager/blob/2.x/src/Contracts/Plugins/GenericPlugin.php" target="_blank" rel="noopener noreferrer">\\Voyager\\Admin\\Contracts\\Plugins\\GenericPlugin</a></td><td>A plugin that doesn&#39;t fit the other types</td></tr><tr><td>Theme</td><td><a href="https://github.com/voyager-admin/voyager/blob/2.x/src/Contracts/Plugins/ThemePlugin.php" target="_blank" rel="noopener noreferrer">\\Voyager\\Admin\\Contracts\\Plugins\\ThemePlugin</a></td><td>Provides one or many themes</td></tr></tbody></table><p>Each type has individual methods you have to implement in your plugin class.<br> Check the Github link to find out more about those methods.</p><div class="info custom-block"><p class="custom-block-title">INFO</p><p>Because the plugin type classes are interfaces you can implement multiple types in one plugin!</p></div><h2 id="providers" tabindex="-1">Providers <a class="header-anchor" href="#providers" aria-hidden="true">#</a></h2><p>Voyager uses provider traits to provide various things. Those are:</p><table><thead><tr><th><strong>Type</strong></th><th><strong>Class</strong></th><th><strong>Description</strong></th><th><strong>Documentation</strong></th></tr></thead><tbody><tr><td>CSS</td><td><a href="https://github.com/voyager-admin/voyager/blob/2.x/src/Contracts/Plugins/Features/Provider/CSS.php" target="_blank" rel="noopener noreferrer">\\Voyager\\Admin\\Contracts\\Plugins\\Features\\Provider\\CSS</a></td><td>Provides CSS in plain text</td><td><a href="/voyager/plugins/assets.html#css">Here</a></td></tr><tr><td>FrontendRoutes</td><td><a href="https://github.com/voyager-admin/voyager/blob/2.x/src/Contracts/Plugins/Features/Provider/FrontendRoutes.php" target="_blank" rel="noopener noreferrer">\\Voyager\\Admin\\Contracts\\Plugins\\Features\\Provider\\FrontendRoutes</a></td><td>Provides routes used on the frontend</td><td><a href="/voyager/plugins/routes.html#frontend">Here</a></td></tr><tr><td>JS</td><td><a href="https://github.com/voyager-admin/voyager/blob/2.x/src/Contracts/Plugins/Features/Provider/JS.php" target="_blank" rel="noopener noreferrer">\\Voyager\\Admin\\Contracts\\Plugins\\Features\\Provider\\JS</a></td><td>Provides JS in plain text</td><td><a href="/voyager/plugins/assets.html#javascript">Here</a></td></tr><tr><td>MenuItems</td><td><a href="https://github.com/voyager-admin/voyager/blob/2.x/src/Contracts/Plugins/Features/Provider/MenuItems.php" target="_blank" rel="noopener noreferrer">\\Voyager\\Admin\\Contracts\\Plugins\\Features\\Provider\\MenuItems</a></td><td>Provide menu items</td><td><a href="/voyager/plugins/menu-items.html">Here</a></td></tr><tr><td>ProtectedRoutes</td><td><a href="https://github.com/voyager-admin/voyager/blob/2.x/src/Contracts/Plugins/Features/Provider/ProtectedRoutes.php" target="_blank" rel="noopener noreferrer">\\Voyager\\Admin\\Contracts\\Plugins\\Features\\Provider\\ProtectedRoutes</a></td><td>Provides protected routes inside Voyager</td><td><a href="/voyager/plugins/routes.html#protected">Here</a></td></tr><tr><td>Settings</td><td><a href="https://github.com/voyager-admin/voyager/blob/2.x/src/Contracts/Plugins/Features/Provider/Settings.php" target="_blank" rel="noopener noreferrer">\\Voyager\\Admin\\Contracts\\Plugins\\Features\\Provider\\Settings</a></td><td>Provides additional settings</td><td><a href="/voyager/plugins/settings.html">Here</a></td></tr><tr><td>SettingsComponent</td><td><a href="https://github.com/voyager-admin/voyager/blob/2.x/src/Contracts/Plugins/Features/Provider/SettingsComponent.php" target="_blank" rel="noopener noreferrer">\\Voyager\\Admin\\Contracts\\Plugins\\Features\\Provider\\SettingsComponent</a></td><td>Provides a settings component shown in the plugin UI</td><td><a href="/voyager/plugins/components.html#settings">Here</a></td></tr><tr><td>Widgets</td><td><a href="https://github.com/voyager-admin/voyager/blob/2.x/src/Contracts/Plugins/Features/Provider/Widgets.php" target="_blank" rel="noopener noreferrer">\\Voyager\\Admin\\Contracts\\Plugins\\Features\\Provider\\Widgets</a></td><td>Provides widgets for the dashboard</td><td><a href="/voyager/plugins/widgets.html">Here</a></td></tr></tbody></table><h2 id="filter" tabindex="-1">Filter <a class="header-anchor" href="#filter" aria-hidden="true">#</a></h2><p>Filter allow a plugin to filter and manipulate various data displayed in Voyager:</p><table><thead><tr><th><strong>Type</strong></th><th><strong>Class</strong></th><th><strong>Description</strong></th><th><strong>Documentation</strong></th></tr></thead><tbody><tr><td>Layouts</td><td>Voyager\\Admin\\Contracts\\Plugins\\Features\\Filter\\Layouts</td><td>Filter the layouts for a given BREAD</td><td><a href="/voyager/plugins/filter.html#layouts">Here</a></td></tr><tr><td>MenuItems</td><td>Voyager\\Admin\\Contracts\\Plugins\\Features\\Filter\\MenuItems</td><td>Filter menu-items for the main and user-menu</td><td><a href="/voyager/plugins/filter.html#menuitems">Here</a></td></tr><tr><td>Widgets</td><td>Voyager\\Admin\\Contracts\\Plugins\\Features\\Filter\\Widgets</td><td>Filter widgets shown on the dashboard</td><td><a href="/voyager/plugins/filter.html#widgets">Here</a></td></tr><tr><td>Media</td><td>Voyager\\Admin\\Contracts\\Plugins\\Features\\Filter\\Media</td><td>Filter media files in the current directory</td><td><a href="/voyager/plugins/filter.html#media">Here</a></td></tr></tbody></table><h2 id="templates" tabindex="-1">Templates <a class="header-anchor" href="#templates" aria-hidden="true">#</a></h2><p>We created templates for all types of plugins on Github to get you started easily:</p><table><thead><tr><th>Type</th><th>Link</th></tr></thead><tbody><tr><td>Authentication</td><td><a href="https://github.com/voyager-admin/authentication-boilerplate" target="_blank" rel="noopener noreferrer">https://github.com/voyager-admin/authentication-boilerplate</a></td></tr><tr><td>Authorization</td><td><a href="https://github.com/voyager-admin/authorization-boilerplate" target="_blank" rel="noopener noreferrer">https://github.com/voyager-admin/authorization-boilerplate</a></td></tr><tr><td>Formfield</td><td><a href="https://github.com/voyager-admin/formfield-boilerplate" target="_blank" rel="noopener noreferrer">https://github.com/voyager-admin/formfield-boilerplate</a></td></tr><tr><td>Generic</td><td><a href="https://github.com/voyager-admin/generic-boilerplate" target="_blank" rel="noopener noreferrer">https://github.com/voyager-admin/generic-boilerplate</a></td></tr><tr><td>Theme</td><td><a href="https://github.com/voyager-admin/theme-boilerplate" target="_blank" rel="noopener noreferrer">https://github.com/voyager-admin/theme-boilerplate</a></td></tr></tbody></table><h2 id="readme" tabindex="-1">Readme <a class="header-anchor" href="#readme" aria-hidden="true">#</a></h2><p>You can specify a markdown file that will be shown in a modal on the plugins page.<br> To do so, provide an absolute path <code>$readme</code> pointing to your markdown file.<br> Whenever you use image in this file, you have to provide a URL <code>$readme_assets_path</code> pointing where the browser can access them.<br> For example:</p><div class="language-php"><pre><code><span class="token keyword">use</span> <span class="token package">Voyager<span class="token punctuation">\\</span>Admin<span class="token punctuation">\\</span>Contracts<span class="token punctuation">\\</span>Plugins<span class="token punctuation">\\</span>GenericPlugin</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">MyPlugin</span> <span class="token keyword">implements</span> <span class="token class-name">GenericPlugin</span>
<span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">readme</span> <span class="token operator">=</span> <span class="token function">realpath</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__DIR__</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">&#39;/README.md&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-&gt;</span><span class="token property">readme_assets_path</span> <span class="token operator">=</span> <span class="token string single-quoted-string">&#39;https://raw.githubusercontent.com/me/my-plugin/branch/&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div>`,35),r=[o];function p(i,l,c,u,d,g){return a(),t("div",null,r)}var m=n(s,[["render",p]]);export{k as __pageData,m as default};
