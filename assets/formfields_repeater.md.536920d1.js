import{_ as e,c as t,o as a,a as s}from"./app.e6a18615.js";var o="/voyager/formfields/repeater/repeater-builder.png",n="/voyager/formfields/repeater/repeater-bread.png";const y='{"title":"Repeater","description":"","frontmatter":{},"headers":[{"level":2,"title":"Options","slug":"options"},{"level":3,"title":"Type","slug":"type"},{"level":3,"title":"Allow sorting","slug":"allow-sorting"},{"level":2,"title":"Browsing","slug":"browsing"},{"level":2,"title":"Keys","slug":"keys"}],"relativePath":"formfields/repeater.md"}',r={},i=s('<h1 id="repeater" tabindex="-1">Repeater <a class="header-anchor" href="#repeater" aria-hidden="true">#</a></h1><p>The repeater allows you to repeat a given set of other formfields.<br> For example you could add a list with guests for your birthday party.<br> First, you add a text formfield for the name, another text formfield for the telephone number and a checkbox wether the guest is attending or not.</p><p><img src="'+o+'" alt=""></p><p>This would result in the following when editing or adding an item:</p><p><img src="'+n+`" alt=""></p><p>And the following would be stored in our database:</p><div class="language-json"><pre><code><span class="token punctuation">[</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;John Doe&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;phone&quot;</span><span class="token operator">:</span> <span class="token string">&quot;12345&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;attending&quot;</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&quot;yes&quot;</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre></div><h2 id="options" tabindex="-1">Options <a class="header-anchor" href="#options" aria-hidden="true">#</a></h2><h3 id="type" tabindex="-1">Type <a class="header-anchor" href="#type" aria-hidden="true">#</a></h3><p>Enter the name for an entry.<br> In our example above this could be <code>Guest</code>.<br> The type is used for the button <code>Add Guest</code> and the title (<code>Guest #1</code>).<br> This field is translatable.</p><h3 id="allow-sorting" tabindex="-1">Allow sorting <a class="header-anchor" href="#allow-sorting" aria-hidden="true">#</a></h3><p>Allow your users to sort items.</p><h2 id="browsing" tabindex="-1">Browsing <a class="header-anchor" href="#browsing" aria-hidden="true">#</a></h2><p>Browsing only represent a simple text representation as we don&#39;t know about the formfields used in views</p><h2 id="keys" tabindex="-1">Keys <a class="header-anchor" href="#keys" aria-hidden="true">#</a></h2><p>When using <strong>exactly</strong> one formfield without a key, values will be stored as <code>[&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]</code>, otherwise as <code>[{ key: &#39;foo&#39; }, { key: &#39;bar&#39; }, { key: &#39;baz&#39; }]</code>.<br> Using multiple formfields without keys will show a warning.</p>`,16),p=[i];function l(d,c,u,h,f,g){return a(),t("div",null,p)}var _=e(r,[["render",l]]);export{y as __pageData,_ as default};
